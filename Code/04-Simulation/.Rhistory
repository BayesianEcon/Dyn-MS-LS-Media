V(g2015)$polygon_c<- as.numeric(factor(membership(cluster_fast_greedy(g2015)))) +2
V(g2015)$ncomments<- aggregate(DBplane_2015$ncomments, by = list(name =DBplane_2015$fb_name ), FUN = sum)[,2]
adj.matrix = get.adjacency(g2015,attr = "weight", sparse=FALSE)
adj.matrix = t(apply(adj.matrix,1, FUN = function(x){x/sum(x)}))
k <- 2 # no of desired clusters
km <- kmeans(adj.matrix , centers = k, nstart = 25)
cl<-cluster_fast_greedy(g2015)
V(g2015)$cl<- 3- km$cluster
#V(g2015)$cl<- cl$membership
V(g2015)$sign<- ifelse(V(g2015)$cl == 1,1,-1)
score <- V(g2015)$sign
if(score[41]>0){score<- -1*score}
score0<-score
score_store<- rep(0, 1000)
for(i in 1:1000){
score<- 0.6*adj.matrix%*%score + 0.4*score0
score<- (score - min(score))/(max(score) - min(score))
score<- score - mean(score)
score_store[i]<-score[1]
print(i)
}
plot.ts(score_store)
score
score<-  (score - min(score))/(max(score)-min(score))
score2015<-score
V(g2015)$score<-score2015
# check$x<-V(g2015)$leaning
# check$score<-V(g2015)$score
#
# plot(check$x, check$score, pch = ".")
# text(check$x, check$score, check$name, cex = 0.5 )
ly<-create_layout(g2015, "stress")
or_coords= data.frame(ly[,1:2])
V(g2015)$cx<-or_coords[,1]
V(g2015)$cy<-or_coords[,2]
g2015=subgraph.edges(g2015,E(g2015)[weight> mean(E(g2015)$weight),delete.vertices = F])
palette=c("#D9D9DA","#DC143C","#1446A0")
V(g2015)$norm_ncomments<- (V(g2015)$ncomments - min( V(g2015)$ncomments ))/(max(V(g2015)$ncomments) - min( V(g2015)$ncomments ))
coords<-cbind(V(g2015)$cx,V(g2015)$cy)
colnames(coords)<-c("x", "y")
tbl = as_tbl_graph(g2015)
#devtools::install_github('thomasp85/ggraph')
gr_all=ggraph(tbl,  coords) +
geom_edge_arc(aes(alpha=weight),strength = 0.15, show.legend = F) +
#scale_edge_width_continuous(range=c(0.01,1))+
geom_node_point(aes(fill=  score, size= norm_ncomments) , shape = 21)+
#scale_fill_manual(values = c("red", "blue"))+
#geom_hline(yintercept = 1.4, col = "white")+
scale_fill_gradient2(low = "red", mid = "white", high = "blue",   midpoint = 0.5)+
geom_node_text(aes(label = name, size = norm_ncomments), repel = T, fontface = "italic", show.legend = F)+
scale_size_continuous(range=c(3, 6))+
labs(title = paste("Year", date_one), subtitle = "Audience-Duplication  Network",
size= expression(italic("Engagement")), fill=expression(italic("Network-Based Leaning")))+
theme_graph( title_face = "italic")+
theme(legend.position = "bottom",
text=element_text(size=18),
title = element_text(hjust = 0.5, face = "italic"),
plot.subtitle  = element_text( face = "italic"),
legend.title = element_text(size=18),
legend.text = element_text(size=14),
legend.box="vertical", legend.margin=margin()
)+
#coord_equal()+
guides(fill = guide_legend(title.position = "top", title.hjust = 0.5),
size=guide_legend(title.position = "top", title.hjust = 0.5))
#size = guide_legend(override.aes = list(size = 5)))
#geom_node_point(aes(color=factor(reliability)))
gr_all
pp2015<-gr_all
dbplot2015<-data.frame(leaning = score2015)
p<-ggplot(dbplot2015, aes(x = leaning))+geom_histogram(col = "black", fill = "#ff7e75",aes(y = after_stat(density)), bins =16)
p<- p +  geom_density(adjust = 0.8)
p<-p+ ggtitle(label =  "Network-Based Leaning")
p<- p +   theme_minimal() + theme(legend.position="bottom", plot.title = element_text(hjust = 0.5, size = 10, face = "italic"),
strip.text.x = element_text(size = 10,face = "bold"),
axis.title = element_text( face = "bold",size = rel(1)),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
plot.subtitle  = element_text( face = "italic"),
#axis.title.x = element_text(size = 18, vjust = -0.2),
axis.text=element_text(size=8),
axis.line = element_blank(),
axis.ticks = element_line(),
panel.grid = element_blank(),
plot.background = element_rect(colour = "black", fill=NA, linewidth=0.5),
legend.title = element_text(face="italic", size=12),
legend.text = element_text(size=8))
p
A = matrix(c(0,1,1,0,
1,0,1,0,
0,0,1,1), byrow = T)
D = diag(c(2,2,2))
D
D = diag(c(1/2, 1/2,1/2))
D
A%*%D
A = matrix(c(0,1,1,0,
1,0,1,0,
0,0,0,1,
0,0,1,0), byrow = T)
D = diag(c(1/2, 1/2, 1, 1))
A%*%D
A = matrix(c(0,1,1,0,
1,0,1,0,
0,0,0,1,
0,0,1,0), byrow = T)
A
A = matrix(c(0,1,1,0,
1,0,1,0,
0,0,0,1,
0,0,1,0),4,4, byrow = T)
A
D = diag(c(1/2, 1/2, 1, 1))
A = matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,1,
0,0,1,0),4,4, byrow = T)
D = diag(c(1/2, 1/2, 1, 1))
A%*%D
A = matrix(c(0,1,1,0,
1,0,1,0,
1,1,0,1,
0,0,1,0),4,4, byrow = T)
D = diag(c(1/2, 1/2, 1/3, 1))
A%*%D
10*4
load("/Users/antonioperuzzi/Peruzzi-hpc/RESULT_SC_IT_fe_test_v4.RData")
library(lubridate)
load("/Users/antonioperuzzi/Peruzzi-hpc/RESULT_SC_IT_fe_test_v4.RData")
load("/Users/antonioperuzzi/Desktop/political_programs/political_programs/01_IT/DataEnv_IT_all.RData")
pages_names_it<- c(unique(EL_x$i)) # a vector of page names
Npages<-length(pages_names_it)
dates<- unique(as_date(DBplane$t))
plot.ts(result$phi_gamma_it[,2])
plot.ts(result$alpha_it)
plot.ts(result$phi_gamma_it[,1])
plot.ts(result$phi_gamma_it[,2])
plot.ts(result$phi_gamma_it[,3])
plot.ts(result$phi_gamma_it[,4])
plot.ts(result$phi_gamma_it[,1])
plot.ts(result$phi_gamma_it[,2])
plot.ts(result$phi_gamma_it[,3])
load("/Users/antonioperuzzi/Peruzzi-hpc/LPmodel/political_programs/DataEnv_IT_all.RData")
View(DBplane)
observed_ditance<-0
Time
DBplane$t
c(as.matrix(dist(leaning)))
observed_ditance<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane== t]
dist_leaning <- c(as.matrix(dist(leaning)))^2
observed_ditance<-c(observed_ditance,dist_leaning)
print(t)
}
EL_x$ith_jth<-paste0(EL_x$ith,"_",EL_x$jth)
EL_x$i_j<- EL_x$ith_jth
AggC<-aggregate(DBplane$ncomments, by = list(tindex = DBplane$t), FUN = sum)
AggC$x<- log(AggC$x)
AggC$x<- AggC$x - mean(AggC$x)
colnames(AggC)[2]<- "tot_comments"
EL_x<- join(EL_x, AggC, by = "tindex")
library(plyr)
EL_x$ith_jth<-paste0(EL_x$ith,"_",EL_x$jth)
EL_x$i_j<- EL_x$ith_jth
AggC<-aggregate(DBplane$ncomments, by = list(tindex = DBplane$t), FUN = sum)
AggC$x<- log(AggC$x)
AggC$x<- AggC$x - mean(AggC$x)
colnames(AggC)[2]<- "tot_comments"
EL_x<- join(EL_x, AggC, by = "tindex")
EL_princ<- join(EL_princ, AggC, by = "tindex")
EL_x$t<-as.numeric(as.factor(EL_x$t))
DBplane$t<-as.numeric(as.factor(DBplane$t))
EL_princ$t<-as.numeric(as.factor(EL_princ$t))
DBplane$ith<-as.numeric(as.factor(DBplane$i))
DBplane$leaning<- (DBplane$leaning - (min(DBplane$leaning)-0.01))/((max(DBplane$leaning)+0.01) - (min(DBplane$leaning)-0.01)   )
############## SETUP
pages_names<- c(unique(EL$i)) # a vector of page names
#Main Dimensions
N<- length(unique(EL_x$i_j)) #number of edges
M<- length(unique(EL_x$i_j))/2 #number of unique edges
Time<- length(unique(EL_x$t)) #number of unique dates
Npages<- length(pages_names) #number of unique pages
K <- 2 #number of states
observed_ditance<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane== t]
dist_leaning <- c(as.matrix(dist(leaning)))^2
observed_ditance<-c(observed_ditance,dist_leaning)
print(t)
}
observed_ditance<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
dist_leaning <- c(as.matrix(dist(leaning)))^2
observed_ditance<-c(observed_ditance,dist_leaning)
print(t)
}
observed_ditance<-observed_ditance[-1]
length(observed_ditance)
D = as.matrix(dist(leaning))
D
D
View(EL_princ)
c(D)
observed_ditance<-EL[,c("i","j","t")]
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
D = as.matrix(dist(leaning))
dist_leaning <- c(D)^2
observed_ditance_v<-c(observed_ditance_v,dist_leaning)
print(t)
}
observed_distance<-EL[,c("i","j","t")]
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
D = as.matrix(dist(leaning))
dist_leaning <- c(D)^2
observed_ditance_v<-c(observed_distance_v,dist_leaning)
print(t)
}
observed_distance<-EL[,c("i","j","t")]
observed_distance_v<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
D = as.matrix(dist(leaning))
dist_leaning <- c(D)^2
observed_ditance_v<-c(observed_distance_v,dist_leaning)
print(t)
}
observed_distance_v<-observed_distance_v[-1]
observed_distance$leaning<-observed_distance_v
observed_distance<-EL[,c("i","j","t")]
observed_distance_v<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
D = as.matrix(dist(leaning))
dist_leaning <- c(D)^2
observed_ditance_v<-c(observed_distance_v,dist_leaning)
print(t)
}
observed_distance<-EL[,c("i","j","t")]
observed_distance_v<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
D = as.matrix(dist(leaning))
dist_leaning <- c(D)^2
observed_distance_v<-c(observed_distance_v,dist_leaning)
print(t)
}
observed_distance_v<-observed_distance_v[-1]
observed_distance$leaning<-observed_distance_v
View(observed_ditance)
View(observed_distance)
observed_distance$i<-as.numeric(as.factor(observed_distance$i))
observed_distance$j<-as.numeric(as.factor(observed_distance$i))
observed_distance<-EL[,c("i","j","t")]
observed_distance_v<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
D = as.matrix(dist(leaning))
dist_leaning <- c(D)^2
observed_distance_v<-c(observed_distance_v,dist_leaning)
print(t)
}
observed_distance_v<-observed_distance_v[-1]
observed_distance$leaning<-observed_distance_v
observed_distance$i<-as.numeric(as.factor(observed_distance$i))
observed_distance$j<-as.numeric(as.factor(observed_distance$j))
View(EL_princ)
View(EL_x)
observed_distance$i_j<- paste0(observed_distance$i,"_", observed_distance$j)
View(observed_distance)
observed_distance$t
observed_distance$i_j_t<- paste0(observed_distance$i,"_", observed_distance$j, observed_distance$t )
observed_distance$i_j_t<- paste0(observed_distance$i,"_", observed_distance$j,"_", observed_distance$t )
EL_princ$i_j_t<- paste0(EL_princ$i,"_", EL_princ$j,"_", EL_princ$t )
EL_x$i_j_t<- paste0(EL_x$i,"_", EL_x$j, "_", EL_x$t )
EL_princ<-join(EL_princ, observed_distance[,c("i_j_t", "leaning")] )
EL_x<-join(EL_x, observed_distance[,c("i_j_t", "leaning")] )
View(EL_x)
EL_princ$i_j_t<- paste0(EL_princ$ith,"_", EL_princ$jth,"_", EL_princ$t )
EL_x$i_j_t<- paste0(EL_x$ith,"_", EL_x$jth, "_", EL_x$t )
EL_princ<-join(EL_princ, observed_distance[,c("i_j_t", "leaning")] )
EL_x<-join(EL_x, observed_distance[,c("i_j_t", "leaning")] )
load("/Users/antonioperuzzi/Peruzzi-hpc/LPmodel/political_programs/DataEnv_IT_all.RData")
#source("/home/peruzzi/LPmodel/political_programs/03_FR/InputNodesModification_fr.R")
EL_x$ith_jth<-paste0(EL_x$ith,"_",EL_x$jth)
EL_x$i_j<- EL_x$ith_jth
AggC<-aggregate(DBplane$ncomments, by = list(tindex = DBplane$t), FUN = sum)
AggC$x<- log(AggC$x)
AggC$x<- AggC$x - mean(AggC$x)
colnames(AggC)[2]<- "tot_comments"
EL_x<- join(EL_x, AggC, by = "tindex")
EL_princ<- join(EL_princ, AggC, by = "tindex")
EL_x$t<-as.numeric(as.factor(EL_x$t))
DBplane$t<-as.numeric(as.factor(DBplane$t))
EL_princ$t<-as.numeric(as.factor(EL_princ$t))
DBplane$ith<-as.numeric(as.factor(DBplane$i))
DBplane$leaning<- (DBplane$leaning - (min(DBplane$leaning)-0.01))/((max(DBplane$leaning)+0.01) - (min(DBplane$leaning)-0.01)   )
############## SETUP
pages_names<- c(unique(EL$i)) # a vector of page names
#Main Dimensions
N<- length(unique(EL_x$i_j)) #number of edges
M<- length(unique(EL_x$i_j))/2 #number of unique edges
Time<- length(unique(EL_x$t)) #number of unique dates
Npages<- length(pages_names) #number of unique pages
K <- 2 #number of states
observed_distance<-EL[,c("i","j","t")]
observed_distance_v<-0
for(t in 1:Time){
leaning<- DBplane$leaning[DBplane$t== t]
D = as.matrix(dist(leaning))
dist_leaning <- c(D)^2
observed_distance_v<-c(observed_distance_v,dist_leaning)
print(t)
}
observed_distance_v<-observed_distance_v[-1]
observed_distance$leaning<-observed_distance_v
observed_distance$i<-as.numeric(as.factor(observed_distance$i))
observed_distance$j<-as.numeric(as.factor(observed_distance$j))
observed_distance$i_j_t<- paste0(observed_distance$i,"_", observed_distance$j,"_", observed_distance$t )
EL_princ$i_j_t<- paste0(EL_princ$ith,"_", EL_princ$jth,"_", EL_princ$t )
EL_x$i_j_t<- paste0(EL_x$ith,"_", EL_x$jth, "_", EL_x$t )
observed_distance[,c("i_j_t", "leaning")]
EL_x$i_j_t
EL_princ<-join(EL_princ, observed_distance[,c("i_j_t", "leaning")] )
EL_x<-join(EL_x, observed_distance[,c("i_j_t", "leaning")] )
View(EL_princ)
View(EL_x)
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_DE.Rdata")
round(colMeans(res$RES),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.05)}),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.95)}),2)
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_FR.Rdata")
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_FR.Rdata")
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_FR.Rdata")
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_FR.Rdata")
round(colMeans(res$RES),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.05)}),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.95)}),2)
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_IT.Rdata")
round(colMeans(res$RES),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.05)}),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.95)}),2)
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_SP.Rdata")
round(colMeans(res$RES),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.05)}),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.95)}),2)
load("/Users/antonioperuzzi/Peruzzi-hpc/RESULT_SC_SPv_fe_rg.RData")
plot.ts(result$alpha_it)
sum(duplicated(result$alpha_it))
load("/Users/antonioperuzzi/Peruzzi-hpc/Table_Alpha_SP.Rdata")
round(colMeans(res$RES),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.05)}),2)
round(apply(res$RES,2, FUN = function(x){quantile(x, 0.95)}),2)
tail(result$alpha_it)
exp(1.746)
dim(res$Ymat)
load("/Users/antonioperuzzi/Peruzzi-hpc/last_hpc_save/SP_all/DataEnv_SP_all.RData")
DBplane<-DBplane[! DBplane$fb_name %in% c("La Voz de Asturias") ,  ]
DBplane$i<- as.numeric(factor(DBplane$fb_name))
#
EL_x<-EL_x[! EL_x$i %in% c("La Voz de Asturias") ,  ]
EL_x<-EL_x[! EL_x$j %in% c("La Voz de Asturias") ,  ]
#
EL_princ<-EL_princ[! EL_princ$i %in% c("La Voz de Asturias") ,  ]
EL_princ<-EL_princ[! EL_princ$j %in% c("La Voz de Asturias") ,  ]
#
EL<-EL[! EL$i %in% c("La Voz de Asturias") ,  ]
EL<-EL[! EL$j %in% c("La Voz de Asturias") ,  ]
EL$ith<-as.numeric(factor(EL$i) , levels = unique(EL$i))
EL$jth<-as.numeric(factor(EL$j) , levels = unique(EL$i))
EL_x$ith<-as.numeric(factor(EL_x$i) , levels = unique(EL_x$i))
EL_x$jth<-as.numeric(factor(EL_x$j) , levels = unique(EL_x$i))
EL_princ$ith<-as.numeric(factor(EL_princ$i , levels = unique(EL_x$i)))
EL_princ$jth<-as.numeric(factor(EL_princ$j, levels = unique(EL_x$i)))
EL_x$ith_jth<-paste0(EL_x$ith,"_",EL_x$jth)
EL_x$i_j<- EL_x$ith_jth
Npages
N<- length(unique(EL_x$i_j)) #number of edges
M<- length(unique(EL_x$i_j))/2 #number of unique edges
Time<- length(unique(EL_x$t)) #number of unique dates
Npages<- length(pages_names) #number of unique pages
Npages
load("/Users/antonioperuzzi/Peruzzi-hpc/last_hpc_save/SP_all/DataEnv_SP_all.RData")
DBplane<-DBplane[! DBplane$fb_name %in% c("La Voz de Asturias") ,  ]
DBplane$i<- as.numeric(factor(DBplane$fb_name))
#
EL_x<-EL_x[! EL_x$i %in% c("La Voz de Asturias") ,  ]
EL_x<-EL_x[! EL_x$j %in% c("La Voz de Asturias") ,  ]
#
EL_princ<-EL_princ[! EL_princ$i %in% c("La Voz de Asturias") ,  ]
EL_princ<-EL_princ[! EL_princ$j %in% c("La Voz de Asturias") ,  ]
#
EL<-EL[! EL$i %in% c("La Voz de Asturias") ,  ]
EL<-EL[! EL$j %in% c("La Voz de Asturias") ,  ]
EL$ith<-as.numeric(factor(EL$i) , levels = unique(EL$i))
EL$jth<-as.numeric(factor(EL$j) , levels = unique(EL$i))
EL_x$ith<-as.numeric(factor(EL_x$i) , levels = unique(EL_x$i))
EL_x$jth<-as.numeric(factor(EL_x$j) , levels = unique(EL_x$i))
EL_princ$ith<-as.numeric(factor(EL_princ$i , levels = unique(EL_x$i)))
EL_princ$jth<-as.numeric(factor(EL_princ$j, levels = unique(EL_x$i)))
EL_x$ith_jth<-paste0(EL_x$ith,"_",EL_x$jth)
EL_x$i_j<- EL_x$ith_jth
#source("/home/peruzzi/LPmodel/political_programs/03_FR/InputNodesModification_fr.R")
EL_x$ith_jth<-paste0(EL_x$ith,"_",EL_x$jth)
EL_x$i_j<- EL_x$ith_jth
EL_x$t<-as.numeric(as.factor(EL_x$t))
DBplane$t<-as.numeric(as.factor(DBplane$t))
EL_princ$t<-as.numeric(as.factor(EL_princ$t))
DBplane$ith<- DBplane$i
DBplane$leaning<- (DBplane$leaning - (min(DBplane$leaning)-0.01))/((max(DBplane$leaning)+0.01) - (min(DBplane$leaning)-0.01)   )
############## SETUP
pages_names<- c(unique(DBplane$fb_name)) # a vector of page names
#Main Dimensions
N<- length(unique(EL_x$i_j)) #number of edges
M<- length(unique(EL_x$i_j))/2 #number of unique edges
Time<- length(unique(EL_x$t)) #number of unique dates
Npages<- length(pages_names) #number of unique pages
K <- 2 #number of states
Npages
load("/Users/antonioperuzzi/RESULT_SC_SP_fe_random.RData")
tail(result$alpha_it)
abline(result$alpha_it, col = "blue")
lines(result$alpha_it, col = "blue")
AggC<-aggregate(DBplane$ncomments, by = list(tindex = DBplane$t), FUN = sum)
AggC$x<- log(AggC$x)
AggC$x<- AggC$x - mean(AggC$x)
colnames(AggC)[2]<- "tot_comments"
EL_x<- join(EL_x, AggC, by = "tindex")
library(plyr)
EL_x<- join(EL_x, AggC, by = "tindex")
EL_princ<- join(EL_princ, AggC, by = "tindex")
EL_x$t<-as.numeric(as.factor(EL_x$t))
DBplane$t<-as.numeric(as.factor(DBplane$t))
EL_princ$t<-as.numeric(as.factor(EL_princ$t))
DBplane$ith<-as.numeric(as.factor(DBplane$i))
DBplane$leaning<- (DBplane$leaning - (min(DBplane$leaning)-0.01))/((max(DBplane$leaning)+0.01) - (min(DBplane$leaning)-0.01)   )
EL_x$ith_jth<-paste0(EL_x$ith,"_",EL_x$jth)
EL_x$i_j<- EL_x$ith_jth
EL_x$t<-as.numeric(as.factor(EL_x$t))
DBplane$t<-as.numeric(as.factor(DBplane$t))
EL_princ$t<-as.numeric(as.factor(EL_princ$t))
DBplane$ith<-as.numeric(as.factor(DBplane$i))
agg<-aggregate(EL_x$w, by = list( i = EL_x$i, t = EL_x$t), FUN = sum) # strength distr through time
agg3<-aggregate(agg$x, by = list(agg$t), FUN = mean)
agg4<-aggregate(agg$x, by = list(agg$t), FUN = var)
round(mean(agg3$x),2)
round(mean(sqrt(agg4$x)),2)
round(mean(agg4$x)/mean(agg3$x),2)
nrow(EL_x)
EL_x$w<-rpois(nrow(EL_x), exp(1.746))
agg<-aggregate(EL_x$w, by = list( i = EL_x$i, t = EL_x$t), FUN = sum) # strength distr through time
agg3<-aggregate(agg$x, by = list(agg$t), FUN = mean)
agg4<-aggregate(agg$x, by = list(agg$t), FUN = var)
round(mean(agg3$x),2)
round(mean(sqrt(agg4$x)),2)
round(mean(agg4$x)/mean(agg3$x),2)
gc()
load("/Users/antonioperuzzi/Peruzzi-hpc/chapter_res_dyn_sequential_SP.RData")
#
# z_check<-zPos[[1]]
#
# library(data.table)
# db_z<-rbindlist(z_check)
#
# plot.ts(db_z$V1[db_z$i == 10])
plot.ts(colMedians(nclusters[5000:10000,]))
library(LaplacesDemon)
library(mvtnorm)
#library(Rcpp)
#library(BayesHMM)
library(reshape2)
library(plyr)
library(data.table)
library(MASS)
library(vegan)
#library(RcppArmadillo)
# library(gtools)
library(rlist)
plot.ts(colMedians(nclusters[5000:10000,]))
#
# z_check<-zPos[[1]]
#
# library(data.table)
# db_z<-rbindlist(z_check)
#
# plot.ts(db_z$V1[db_z$i == 10])
plot.ts(colMedian(nclusters[5000:10000,]))
#
# z_check<-zPos[[1]]
#
# library(data.table)
# db_z<-rbindlist(z_check)
#
# plot.ts(db_z$V1[db_z$i == 10])
plot.ts(apply(nclusters[5000:10000,],2,median))
#
# z_check<-zPos[[1]]
#
# library(data.table)
# db_z<-rbindlist(z_check)
#
# plot.ts(db_z$V1[db_z$i == 10])
plot.ts(apply(alf_ite[5000:10000,],2,mean))
load("/Users/antonioperuzzi/Desktop/political_programs/outlet_posts/outlets.RData")
View(outlets)
library(data.table)
library(here)
setwd("~/Desktop/RepositoryJASA/Code/Simulation")
library(here)
